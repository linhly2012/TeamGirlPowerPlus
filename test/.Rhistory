colnames(df)
df$hover <- with(df, paste('State :' , State, '<br />', 'Population :', Population))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~Total, text = ~hover, locations = ~State,
color = ~Total, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
p
us <- c(left = -125, bottom = 25.75, right = -67, top = 49)
map <- get_stamenmap(us, zoom = 5, maptype = "toner-lite")
library(ggplot2)
us <- c(left = -125, bottom = 25.75, right = -67, top = 49)
map <- get_stamenmap(us, zoom = 5, maptype = "toner-lite")
install.packages(ggmap)
install.packages('ggmap')
library('ggmap')
require(googleVis)
library('googleVis')
install.packages('googleVis')
library('googleVis')
library('googleVis')
df = data.frame(country=c("US", "GB","BR"),
val1=c(10,13,14),
val2=c(23,12,32))
Bar <- gvisBarChart(df)
plot(Bar)
df = data.frame(country=c("US", "GB","BR"),
val1=c(10,13,14),
val2=c(23,12,32))
Geo=gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",
options=list(projection="kavrayskiy-vii"))
plot(Geo)
df <- read.csv('./States Level Data/Crime And Education Rate2014-StatesLevel.csv')
View(df)
?require
state <- df$State
View(state)
library(dplyr)
library(googleVis)
state <- df$State %>% as.list()
View(state)
state <- df$State %>% as.matrix()
View(state)
View(state)
states <- df$State %>% as.matrix()
total <- df$Total %<% as.matrix()
total <- df$Total %>% as.matrix()
test <- data.frame(states,total)
View(test)
GeoStates <- gvisGeoChart(test, "state", "total -graduation percentage",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=800,
heigh = 500))
plot(GeoStates)
require(datasets)
states <- data.frame(state.name, state.x77)
GeoStates <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
View(states)
View(require(datasets))
require(datasets)
states <- data.frame(state.name, state.x77)
View(states)
GeoStates <- gvisGeoChart(test, "state", "total",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=800,
heigh = 500))
plot(GeoStates)
test <- data.frame(states,total)
View(test)
GeoStates <- gvisGeoChart(test, "state", "total",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=800,
heigh = 500))
plot(GeoStates)
test <- data.frame(states,total)
View(test)
require(df)
df <- read.csv('./States Level Data/Crime And Education Rate2014-StatesLevel.csv')
test <- data.frame(df$State, df$Total)
View(test)
GeoStates <- gvisGeoChart(test, "state", "total",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=800,
heigh = 500))
plot(GeoStates)
GeoStates <- gvisGeoChart(test, "df.State", "df.Total",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=800,
heigh = 500))
plot(GeoStates)
GeoStates <- gvisGeoChart(test, "df.State", "df.Total",
options=list(region="US",
displayMode="regions",
resolution="provinces",
colors="['#cbb69d', '#603913', '#c69c6e']",
width=800,
heigh = 500))
plot(GeoStates)
GeoStates <- gvisGeoChart(test, "df.State", "df.Total",
options=list(region="US",
displayMode="regions",
resolution="provinces",
colors="['#cbb69d']",
width=800,
heigh = 500))
plot(GeoStates)
GeoStates <- gvisGeoChart(test, "df.State", "df.Total",
options=list(region="US",
displayMode="regions",
resolution="provinces",
colors="['#4286f4']",
width=800,
heigh = 500))
plot(GeoStates)
GeoStates <- gvisGeoChart(df, "State", "Total",
options=list(region="US",
displayMode="regions",
resolution="provinces",
colors="['#4286f4']",
width=800,
heigh = 500))
plot(GeoStates)
GeoStates <- gvisGeoChart(df, "State", "Total",
"Population",
options=list(region="US",
displayMode="regions",
resolution="provinces",
colors="['#4286f4']",
width=800,
heigh = 500))
plot(GeoStates)
plyr::rename(df, c('Total' = 'Total (Percent of Student Graduate'))
test <- df
test <- plyr::rename(test, c('Total' = 'Total (Percent of Student Graduate'))
View(test)
GeoStates <- gvisGeoChart(test, "State", "Total (Percent of Student Graduate",
"Population",
options=list(region="US",
displayMode="regions",
resolution="provinces",
colors="['#4286f4']",
width=800,
heigh = 500))
plot(GeoStates)
GeoStates <- gvisGeoChart(test, "State", "Total-(Percent-of-Student-Graduate)",
"Population",
options=list(region="US",
displayMode="regions",
resolution="provinces",
colors="['#4286f4']",
width=800,
heigh = 500))
plot(GeoStates)
GeoStates <- gvisGeoChart(test, "State", "Total(Percent-of-Student-Graduate)",
"Population",
options=list(region="US",
displayMode="regions",
resolution="provinces",
colors="['#4286f4']",
width=800,
heigh = 500))
plot(GeoStates)
test <- plyr::rename(test, c('Total' = 'Percent of Student Graduate'))
GeoStates <- gvisGeoChart(test, "State", "Percent of StudentGraduate",
"Population",
options=list(region="US",
displayMode="regions",
resolution="provinces",
colors="['#4286f4']",
width=800,
heigh = 500))
plot(GeoStates)
GeoStates <- gvisGeoChart(test, "State", "Percent of Student Graduate",
"Population",
options=list(region="US",
displayMode="regions",
resolution="provinces",
colors="['#4286f4']",
width=800,
heigh = 500))
plot(GeoStates)
test <- plyr::rename(test, c('Total' = 'Percent of Student Graduate'))
GeoStates <- gvisGeoChart(test, "State", "Total",
"Population",
options=list(region="US",
displayMode="regions",
resolution="provinces",
colors="['#4286f4']",
width=800,
heigh = 500))
plot(GeoStates)
hist(data(),
main=paste('r', dist, '(', n, ')', sep=''))
output$plot <- renderPlot({
dist <- input$dist
n <- input$n
hist(data(),
main=paste('r', dist, '(', n, ')', sep=''))
})
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
df <- read.csv('./States Level Data/Crime And Education Rate2014-StatesLevel.csv')
runApp('test')
GeoStates <- gvisGeoChart(test, "State", "Total",
"Population",
options=list(region="US",
displayMode="regions",
resolution="provinces",
colors="['#4286f4']",
width=800,
heigh = 500))
plot(GeoStates)
GeoStates <- gvisGeoChart(test, "State", "Total",
"Population",
options=list(region="US",
displayMode="regions",
resolution="provinces",
colors="['#4286f4']",
width=800,
heigh = 500))
GeoStates <- gvisGeoChart(df, "State", "Total",
"Population",
options=list(region="US",
displayMode="regions",
resolution="provinces",
colors="['#4286f4']",
width=800,
heigh = 500))
plot(GeoStates)
runApp('test')
library(googleVis)
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
View(df)
colnames(df)
df[6:11]
colnames(df[6:11])
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
library('markdown')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
fluidPage(
# Give the page a title
#titlePanel("Correlation Between Crime and Education"),
# # Generate a row with a sidebar
# sidebarLayout(
#
#   # Define the sidebar with one input
#   sidebarPanel(
#     selectInput("crimes", "Type of Crimes: ",
#                 choices=colnames(df[6:11]))
#   ),
# Create a spot for the barplot
# mainPanel(
#   htmlOutput("view"),
#   tabsetPanel(type = "tabs",
#               tabPanel("Table", tableOutput("table"))
#   )
# )
# )
#)
library('markdown')
navbarPage("Navbar!",
tabPanel("Plot",
mainPanel(
htmlOutput("view")
)
)
),
tabPanel("Table",
tableOutput("table")
)
)
fluidPage(
# Give the page a title
#titlePanel("Correlation Between Crime and Education"),
# # Generate a row with a sidebar
# sidebarLayout(
#
#   # Define the sidebar with one input
#   sidebarPanel(
#     selectInput("crimes", "Type of Crimes: ",
#                 choices=colnames(df[6:11]))
#   ),
# Create a spot for the barplot
# mainPanel(
#   htmlOutput("view"),
#   tabsetPanel(type = "tabs",
#               tabPanel("Table", tableOutput("table"))
#   )
# )
# )
#)
library(markdown)
navbarPage("Navbar!",
tabPanel("Plot",
mainPanel(
htmlOutput("view")
)
)
),
tabPanel("Table",
tableOutput("table")
)
)
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
source("Summary.R")
runApp('test')
runApp('test')
colnames(df)
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
View(df)
colnames(df)
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
output$view <- renderGvis({
GeoStates <- gvisGeoChart(df, "State", "Total",
"Economically.disadvantaged",
"Limited.English.proficiency",
# "Students.with.disabilities",
options=list(region="US",
displayMode="regions",
resolution="provinces",
colors="['#4286f4']",
width=800,
heigh = 500))
})
function(input, output) {
#render the whole map
output$view <- renderGvis({
GeoStates <- gvisGeoChart(df, "State", "Total",
"Economically.disadvantaged",
"Limited.English.proficiency",
# "Students.with.disabilities",
options=list(region="US",
displayMode="regions",
resolution="provinces",
colors="['#4286f4']",
width=800,
heigh = 500))
})
#render scatter
# output$plot <- renderGvis({
#
# })
#render the table information
output$table <- renderTable({
#due to of the weird value being include in the df
#df -> reformat to only appropriate information and
#value of interest
data.frame(df[2], df[4:15])
})
}
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
colnames(df)
runApp('test')
View(df)
colnames(df)
df <- plyr::rename(df, c("Violent.Crime.rate" = "Violent Crime Rate",
"Murder.and.nonnegligent.manslaughter.rate" = "Murder & Nonnegligent Manslaughter Rate",
"Legacy.rape.rate..1" = "Legacy Rape Rate..1",
"Revised.rape.rate..2" = "Revised Rape Rate..2",
"Robbery.rate" = "Robbery Rate",
"Aggravated.assault.rate" = "Aggravated Assault Rate",
"Economically.disadvantaged" = "Economically Disadvantaged",
"Limited.English.proficiency" = "Limited English Proficiency",
"Students.with.disabilities" = "Students With Disabilities"))
df
View(df)
colnames(df)
df <- data.frame(df[2][4:15])
df <- read.csv('./States Level Data/Crime And Education Rate2014-StatesLevel.csv')
df <- data.frame(df[2][4:15])
df <- data.frame(df[2], df[4:15])
df <- plyr::rename(df, c("Violent.Crime.rate" = "Violent Crime Rate",
"Murder.and.nonnegligent.manslaughter.rate" = "Murder & Nonnegligent Manslaughter Rate",
"Legacy.rape.rate..1" = "Legacy Rape Rate..1",
"Revised.rape.rate..2" = "Revised Rape Rate..2",
"Robbery.rate" = "Robbery Rate",
"Aggravated.assault.rate" = "Aggravated Assault Rate",
"Economically.disadvantaged" = "Economically Disadvantaged",
"Limited.English.proficiency" = "Limited English Proficiency",
"Students.with.disabilities" = "Students With Disabilities"))
df <- read.csv('./States Level Data/Crime And Education Rate2014-StatesLevel.csv')
df <- data.frame(df[2], df[4:15])
df <- plyr::rename(df, c("Violent.Crime.rate" = "Violent Crime Rate",
"Murder.and.nonnegligent.manslaughter.rate" = "Murder & Nonnegligent Manslaughter Rate",
"Legacy.rape.rate..1" = "Legacy Rape Rate..1",
"Revised.rape.rate..2" = "Revised Rape Rate..2",
"Robbery.rate" = "Robbery Rate",
"Aggravated.assault.rate" = "Aggravated Assault Rate",
"Economically.disadvantaged" = "Economically Disadvantaged",
"Limited.English.proficiency" = "Limited English Proficiency",
"Students.with.disabilities" = "Students With Disabilities"))
df <- read.csv('./States Level Data/Crime And Education Rate2014-StatesLevel.csv')
df <- data.frame(df[2], df[4:15])
df <- plyr::rename(df, c("Violent.Crime.rate" = "Violent Crime Rate",
"Murder.and.nonnegligent.manslaughter.rate" = "Murder & Nonnegligent Manslaughter Rate",
"Legacy.rape.rate..1" = "Legacy Rape Rate..1",
"Revised.rape.rate..2" = "Revised Rape Rate..2",
"Robbery.rate" = "Robbery Rate",
"Aggravated.assault.rate" = "Aggravated Assault Rate",
"Economically.disadvantaged" = "Economically Disadvantaged",
"Limited.English.proficiency" = "Limited English Proficiency",
"Students.with.disabilities" = "Students With Disabilities"))
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
library(dplyr)
state.names <- df$State %>% unique() %>% as.list()
print(state.names)
View(state.names)
runApp('test')
