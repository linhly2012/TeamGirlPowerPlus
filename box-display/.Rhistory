print(str_compare)
if(str_name == str_compare) {
plot.data <- data %>% filter(name == str_compare)
}
plot.data <- data %>% filter(name == str_compare)
name <- 'Nutri-grain_Wheat'
for(str_name in name_brand){
str_compare <- data%>% select(name) %>% filter(name == str_name) %>% as.matrix()
print(str_compare)
if(name == str_compare) {
plot.data <- data %>% filter(name == str_name)
}
print(str_name)
}
for(str_name in name_brand){
str_compare <- data%>% select(name) %>% filter(name == str_name) %>% as.matrix()
print(str_compare)
if(name == str_compare) {
plot.data <- data %>% filter(name == str_name)
}
print(str_name)
}
print(str_name)
for(str_name in name_brand){
str_compare <- data%>% select(name) %>% filter(name == str_name) %>% as.matrix()
# if(name == str_compare) {
#   plot.data <- data %>% filter(name == str_name)
# }
}
print(str_compare)
for(str_name in name_brand){
str_compare <- data%>% select(name) %>% filter(name == str_name) %>% as.matrix()
# if(name == str_compare) {
#   plot.data <- data %>% filter(name == str_name)
# }
print(str_compare)
}
for(str_name in name_brand){
str_compare <- data%>% select(name) %>% filter(name == str_name) %>% as.matrix()
# if(name == str_compare) {
#   plot.data <- data %>% filter(name == str_name)
# }
print(str_compare[1,])
}
parseInt(name)
eval(parse(text = "x"))
for(str_name in name_brand){
str_compare <- data%>% select(name) %>% filter(name == str_name) %>% as.matrix()
# if(name == str_compare) {
#   plot.data <- data %>% filter(name == str_name)
# }
i <- which(data$name == str_compare)
print(str_compare[1,])
}
for(str_name in name_brand){
str_compare <- data%>% select(name) %>% filter(name == str_name) %>% as.matrix()
# if(name == str_compare) {
#   plot.data <- data %>% filter(name == str_name)
# }
i <- which(data$name == str_compare)
print(i)
}
i <- which(data$name == str_compare)
print(data[i,])
for(str_name in name_brand){
str_compare <- data%>% select(name) %>% filter(name == str_name) %>% as.matrix()
# if(name == str_compare) {
#   plot.data <- data %>% filter(name == str_name)
# }
i <- which(data$name == str_compare)
print(data[i,])
}
for(str_name in name_brand){
str_compare <- data%>% select(name) %>% filter(name == str_name) %>% as.matrix()
# if(name == str_compare) {
#   plot.data <- data %>% filter(name == str_name)
# }
i <- which(data$name == str_compare)
print(paste(str_name, ":", i))
}
print(paste(str_name, ":", i, str_compare[i,]))
print(paste(str_compare[i,]))
name <- 'Nutri-grain_Wheat'
for(str_name in name_brand){
str_compare <- data%>% select(name) %>% filter(name == str_name) %>% as.matrix()
# if(name == str_compare) {
#   plot.data <- data %>% filter(name == str_name)
# }
i <- which(data$name == str_compare)
print(paste(str_compare[i,]))
}
for(str_name in name_brand){
str_compare <- data%>% select(name) %>% filter(name == str_name) %>% as.matrix()
if(name == str_compare) {
plot.data <- data %>% filter(name == str_name)
i <- which(data$name == str_compare)
}
print(plot.data)
}
if(identical(name, str_name)) {
plot.data <- data %>% filter(name == str_name)
i <- which(data$name == str_compare)
}
name <- 'Nutri-grain_Wheat'
for(str_name in name_brand){
str_compare <- data%>% select(name) %>% filter(name == str_name) %>% as.matrix()
if(identical(name, str_name)) {
plot.data <- data %>% filter(name == str_name)
i <- which(data$name == str_compare)
}
print(plot.data)
}
name <- 'Nutri-grain_Wheat'
for(str_name in name_brand){
str_compare <- data%>% select(name) %>% filter(name == str_name) %>% as.matrix()
if(identical(name, str_name)) {
plot.data <- data %>% filter(name == str_name)
i <- which(data$name == str_compare)
print(i)
break
}
}
str_compare <- data%>% select(name) %>% filter(name == str_name) %>% as.matrix()
if(identical(name, str_name)) {
plot.data <- data %>% filter(name == str_name)
i <- which(data$name == str_compare)
print(i)
break
}
View(name_brand)
View(name_brand)
str_compare <- name_brand %>% filter(name == str_name) %>% as.matrix()
name <- 'Nutri-grain_Wheat'
str_name <- 'Nutri-grain_Wheat'
str_compare <- name_brand %>% filter(name == str_name) %>% as.matrix()
name_brand <- data %>% select(name)
str_compare <- name_brand %>% filter(name == str_name) %>% as.matrix()
str_compare
str_compare[1,]
str_name <- 'Nutri-grain_Wheat'
str_compare <- name_brand %>% filter(name == str_name) %>% as.matrix()
i <- which(name_brand$name == str_compare)
i <- which(name_brand$str_name == str_compare)
str_compare[i,]
i <- which(name_brand$name== str_name)
str_compare[i,]
i <- which(name_brand$name== str_name)
str_compare[i,]
i <- which(name_brand$name == str_name)
str_compare[i,]
rownames(name_brand)
i <- which(name_brand$name == rownames(name_brand))
str_compare[i,]
str <- str_compare[i,]
str
View(str_compare)
str <- str_compare$name
str_compare <- name_brand %>% filter(name == str_name) %>% as.matrix()
View(str_compare)
str <- str_compare[1,]
str
as.numeric(rownames(str_compare))
str_compare <- name_brand %>% filter(name == str_name)
View(str_compare)
str_name <- '100%_Bran'
str_compare <- name_brand %>% filter(name == str_name)
str <- str_compare[1,]
str
str_compare <- name_brand %>% filter(name == str_name)
View(str_compare)
str_compare <- (name_brand %>% filter(name == str_name) %>% as.matrix())[1,]
View(str_compare)
str_compare
data %>% select(str_compare)
str_compare <- (name_brand %>% filter(name == str_name) %>% as.matrix())[1,]
data %>% select(str_compare)
data %>% filter(name == str_compare)
str_name <- '100%_Bran'
for(name_val in name_brand) {
str_compare <- (name_brand %>% filter(name == name_val) %>% as.matrix())[1,]
if(identical(str_name, str_compare)) {
str_compare
data %>% filter(name == str_compare)
print(data)
break
}
}
str_name <- '100%_Bran'
Test <- function(str_name) {
for(name_val in name_brand) {
str_compare <- (name_brand %>% filter(name == name_val) %>% as.matrix())[1,]
if(identical(str_name, str_compare)) {
str_compare
data %>% filter(name == str_compare)
print(data)
break
}
}
}
t <- Test(str_name)
t
str_name <- '100%_Bran'
str_compare <- (name_brand %>% filter(name == str_name) %>% as.matrix())[1,]
str_compare
data %>% filter(name == str_compare)
str_name <- '100%_Bran' #--> input$name
str_compare <- (name_brand %>% filter(name == str_name) %>% as.matrix())[1,]
str_compare
data %>% filter(name == str_compare)
str_compare <- (data %>% filter(name == input$name) %>% as.matrix())[1,]
str_compare <- (data %>% filter(name == str_name) %>% as.matrix())[1,]
str_compare
mfr <- 'N'
test_mfr <- 'N'
mfr_compare <- (data %>% filter(mfr == test_mfr) %>% as.matrix())[1, ]
mfr_compare
mfr_data <- data %>% select(everything()) %>% filter(mfr == mfr_compare)
mfr_data <- data %>% select(all) %>% filter(mfr == mfr_compare)
mfr_data <- data %>% select() %>% filter(mfr == mfr_compare)
mfr_data <- data %>% select(everything()) %>% filter(mfr == mfr_compare)
test_mfr <- 'N'
mfr_compare <- (data %>% filter(mfr == test_mfr) %>% as.matrix())[1,]
mfr_data <- data %>% select(everything()) %>% filter(mfr == mfr_compare)
mfr_data <- data %>% select(everything()) %>% filter(mfr == test_mfr)
mfr_data
mfr_compare
mfr_compare <- (data %>% select(mfr == test_mfr) %>% as.matrix())[1,]
mfr_compare <- (data %>% select(mfr) %>% filter(mfr == test_mfr) %>% as.matrix())[1,]
mfr_compare
mfr_data <- data %>% select(everything()) %>% filter(mfr == mfr_compare)
mfr_data
shiny::runApp('Desktop/INFO201/a8-building-apps-linhly2012')
manufacture <- data %>% select(everything()) %>% filter(mfr == mfr_compare)
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
if(input$mfr == mfr_compare) {
manufacture= data %>% select(everything()) %>% filter(mfr == mfr_compare)
}
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
ggplot(data,
aes(x=calories, y=name, color=factor(type))) + geom_point()
ggplot(data,
aes(x=calories, y=name, color=factor(mfr))) + geom_point()
ggplot(data,
aes(x=calories, y=mfr, color=factor(type))) + geom_point()
ggplot(data,
aes(x=calories, y=fat, color=factor(type))) + geom_point()
ggplot(data,
aes(x=calories, y=sodium, color=factor(name))) + geom_point()
ggplot(data,
aes(x=calories, y=sodium, color=factor(type))) + geom_point()
runApp('Desktop/INFO201/m18-shiny-complete/exercise-5')
ggplot(data,
aes(x=name, y=mfr, color=factor(type))) + geom_point()
ggplot(data,
aes(x=mfr, y=name, color=factor(type))) + geom_point()
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
type_compare <- (data %>% select(type) %>% unique())
type_compare
type_compare <- (data %>% select(type) %>% unique()) %>% as.matrix()
type_compare
plot.data <- data %>% select(everything()) %>% filter(type = type_compare[1, ])
plot.data <- data %>% select(everything()) %>% filter(type == type_compare[1, ])
plot.data
plot.data <- data %>% select(everything()) %>% filter(type == type_compare[2, ])
plot.data
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
type_compare <- data %>% select(type) %>% unique() %>% as.matrix()
type_compare
plot.data <- data %>% select(everything()) %>% filter(type == type_compare[1, ])
plot.data
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
plot.data = (data %>% select(everything()) %>% filter(type == type_compare[1, ]))$type
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
tmp_data <- data %>% select(everything()) %>% filter(mfr == mfr_compare)
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/m18-shiny-complete/exercise-5')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
type_compare <- data %>% select(type) %>% unique() %>% as.matrix()
type_compare
type <- type_compare[1, ]
type
type_compare
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
data_type <- data %>% select(everything()) %>% filter(type = input$type)
data_type <- data %>% select(everything()) %>% filter(type == type_compare[1, ])
data_type
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
data_type2 <- data %>% select(everything()) %>% filter(type == input$type)
input$type = 'K'
shiny::runApp('Desktop/INFO201/a8-building-apps-linhly2012')
shiny::runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
runApp('Desktop/INFO201/a8-building-apps-linhly2012')
shiny::runApp('Desktop/INFO/TeamGirlPowerPlusOne/box-display')
library(shinydashboard)
library(shiny)
library(dplyr)
library(googleVis)
library(ggplot2)
runApp('Desktop/INFO/TeamGirlPowerPlusOne/box-display')
>>>>>>> dc06e8f148795852302b3871b3b50c2a608bb124
#shiny dashboard
#https://rstudio.github.io/shinydashboard/get_started.html
#condition Panel
#https://shiny.rstudio.com/reference/shiny/latest/conditionalPanel.html
#install.packages('shinydashboard')
library(shinydashboard)
library(shiny)
library(dplyr)
library(googleVis)
library(ggplot2)
library(magrittr)
library(plotly)
library(knitr)
# setwd("C:/Users/zacht/Documents/info-201/final-project/TeamGirlPowerPlusOne/box-display")
<<<<<<< HEAD
df_2014 <- read.csv('../States.Level.Data/Crime.And.Education.Rate.2014-StatesLevel.csv')
df_2013 <- read.csv('../States.Level.Data/Crime.And.Education.Rate.2013-StatesLevel.csv')
df.data <- df_2013
=======
df_2014 <- read.csv('../States.Level.Data/Crime.And.Education.Rate.2014-StatesLevel.csv')
df_2013 <- read.csv('../States.Level.Data/Crime.And.Education.Rate.2013-StatesLevel.csv')
df.data <- df_2013
>>>>>>> group the test(ing) folder together
server <- function(input, output) {
#render the whole map
output$view <- renderGvis({
if(input$year == 2014) {
df.data <- df_2014
}
else if(input$year == 2013) {
df.data <- df_2013
}
#clean up the df.data - remove unneccessary columns
df.data <- data.frame(df.data[2], df.data[4:15])
#rename
df.data <- plyr::rename(df.data, c("Violent.Crime.rate" = "Violent Crime Rate",
"Murder.and.nonnegligent.manslaughter.rate" = "Murder & Nonnegligent Manslaughter Rate",
"Legacy.rape.rate..1" = "Legacy Rape Rate",
"Revised.rape.rate..2" = "Revised Rape Rate",
"Robbery.rate" = "Robbery Rate",
"Aggravated.assault.rate" = "Aggravated Assault Rate",
"Economically.disadvantaged" = "Economically Disadvantaged",
"Limited.English.proficiency" = "Limited English Proficiency",
"Students.with.disabilities" = "Students With Disabilities"))
GeoStates <- gvisGeoChart(df.data, "State", "Total",
"Population",
options=list(region="US",
displayMode="regions",
resolution="provinces",
colors="['#4286f4']",
width= 390,
heigh = 500))
})
#render the table information
output$table <- renderTable({
#due to of the weird value being include in the df.data
#df.data -> reformat to only appropriate information and
#value of interest
#check.names = remove the dot between column names since
#there is white space in between words
if(input$table_year == 2013) {
tmp <- df_2013
}
else if(input$table_year == 2014) {
tmp <- df_2014
}
else if(input$table_year == 'Both') {
tmp <- rbind(x=df_2013,
y=df_2014)
}
if(input$table_state != 'All') {
tmp <- filter(tmp, State == input$table_state)
}
#clean up the df.data - remove unneccessary columns
tmp <- data.frame(tmp[2], tmp[4:15])
#rename
tmp <- select(tmp, State, Year, Violent.Crime.Rate, Murder...Nonnegligent.Manslaughter.Rate, Revised.Rape.Rate,
Robbery.Rate, Aggravated.Assault.Rate, Total, Economically.Disadvantaged,
Limited.English.Proficiency, Students.With.Disabilities) %>%
mutate(Violent.Crime.Graduation.Ratio = Violent.Crime.Rate / Total)
colnames(tmp) <- c("State", "Year", "Violent Crime Rate", "Murder/Nonegligent manslaugter Rate", "Rape Rate", "Robbery Rate",
"Aggravated Assault Rate", "Graduation Rate", "Economically Disadvantaged Rate", "Limited English Proficiency Rate",
"Student Disability Rate", "Violent Crime/Graduation Ratio")
data.frame(tmp, check.names = FALSE)
})
#this method render a scatterplot that is support by plotly. The scatterplot
#will be use to display the correlation between the information of crimes rate
#and education rates(including, "Economically Disadvantaged Rate", "Limited English
#Proficiency Rate", "Student Disability Rate") of each state.
output$plot <- renderPlotly({
if(input$year == 2014) {
df.data <- df_2014
}
else if(input$year == 2013) {
df.data <- df_2013
}
#clean up the df.data - remove unneccessary columns
df.data <- data.frame(df.data[2], df.data[4:15])
#identify y-label and variable go on y axis and color for each crime
if(input$crime == "Violent Crime Rate") {
y_var = df.data$Violent.Crime.Rate
color_display = '#ff422d'
}
else if(input$crime == "Murder/Nonegligent manslaugter Rate") {
y_var = df.data$Murder...Nonnegligent.Manslaughter.Rate
color_display = '#b71f4a'
}
else if(input$crime == "Rape Rate") {
y_var = df.data$Revised.Rape.Rate
color_display = '#7e5591'
}
else if(input$crime == "Robbery Rate") {
y_var = df.data$Revised.Rape.Rate
color_display = '#5b6166'
}
else if(input$crime == "Aggravated Assault Rate") {
y_var = df.data$Aggravated.Assault.Rate
color_display = '#b20a01'
}
y_label = input$crime
#identify x-label and variable go on x axis
if(input$students.state.info == "Economically Disadvatanged") {
x_var = df.data$Economically.Disadvantaged
}
else if(input$students.state.info == "Limited English Proficiency") {
x_var = df.data$Limited.English.Proficiency
}
else if(input$students.state.info ==  "Student Disability") {
x_var = df.data$Students.With.Disabilities
}
#update the x-label for the graph
x_label= input$students.state.info
plot <- plot_ly(df.data,
x = ~x_var,
y = ~y_var,
type = 'scatter',
mode = 'markers',
marker = list(size = 10, color = ~color_display,
line = list(color = '#bae8ff', width = 1)),
text = ~paste0("Location: ", df.data$State, "<br />",
"Population: ", df.data$Population, "<br />",
y_label, ": ", y_var,
"<br />", x_label, ": ", x_var,
"<br />")) %>%
layout(title = paste0("<b>",'Crime Rate Studies',"</b>"),
xaxis = list(title = 'Economically Disadvatanged'),
yaxis = list(title = y_label, zeroline = TRUE)
)
})
<<<<<<< HEAD
#render summary page
output$Summary <- renderTable({
if(input$summary_year == 2014) {
tmp <- df_2014
} else if(input$summary_year == 2013) {
tmp <- df_2013
}
tmp <- tmp %>% select(2, 4:7, 9:15)
high.grad <- tmp %>% filter(Total == max(Total))
low.crime <- tmp %>% filter(Violent.Crime.Rate == min(Violent.Crime.Rate))
high.crime <- tmp %>% filter(Violent.Crime.Rate == max(Violent.Crime.Rate))
low.grad <- tmp %>% filter(Total == min(Total))
high.crime.state <- tmp %>% filter(State != "District of Columbia") %>% filter(Violent.Crime.Rate == max(Violent.Crime.Rate))
low.grad.state <- tmp %>% filter(State != "District of Columbia") %>% filter(Total == min(Total))
tmp <- rbind(high.grad, low.grad, low.grad.state, low.crime, high.crime, high.crime.state)
tmp <- cbind(Status = c("Highest Graduation Rate", "Lowest Graduation Rate", "lowest Graduation Rate (State)",
"Lowest Crime Rate", "Highest Crime Rate", "Highest Crime Rate (State)"), tmp)
colnames(tmp) <- c("Status", "State", "Year", "Population", "Violent Crime Rate", "Murder/Nonnegligent Manslaughter Rate",
"Rape Rate", "Robbery Rate", "Aggravated Assault Rate", "Graduation Rate",
"Economically Disadvantaged Rate", "Limited English Proficiency Rate", "Student Disability Rate")
data.frame(tmp, check.names = FALSE)
})
}
=======
}
>>>>>>> group the test(ing) folder together
runApp()
runApp()
shiny::runApp()
runApp()
